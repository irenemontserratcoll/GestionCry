package Model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "espacios_individuales")
public class EspacioIndividual {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private int piso;
    private int numeroAsiento;
    private String tiempoReservado;

    // Constructor vacío
    public EspacioIndividual() {
    }

    // Constructor con parámetros
    public EspacioIndividual(int piso, int numeroAsiento) {
        this.piso = piso;
        this.numeroAsiento = numeroAsiento;
    }

    // Getters y Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getPiso() {
        return piso;
    }

    public void setPiso(int piso) {
        if (piso <= 0) throw new IllegalArgumentException("El piso debe ser mayor a 0");
        this.piso = piso;
    }

    public int getNumeroAsiento() {
        return numeroAsiento;
    }

    public void setNumeroAsiento(int numeroAsiento) {
        if (numeroAsiento <= 0) throw new IllegalArgumentException("El número de asiento debe ser mayor a 0");
        this.numeroAsiento = numeroAsiento;
    }

    public String getTiempoReservado() {
        return tiempoReservado;
    }

    public void setTiempoReservado(String tiempoReservado) {
        if (tiempoReservado == null || tiempoReservado.isEmpty()) {
            throw new IllegalArgumentException("El tiempo reservado no puede estar vacío");
        }
        this.tiempoReservado = tiempoReservado;
    }

    // Método toString
    @Override
    public String toString() {
        return "EspacioIndividual{" +
                "id=" + id +
                ", piso=" + piso +
                ", numeroAsiento=" + numeroAsiento +
                (tiempoReservado != null ? ", tiempoReservado='" + tiempoReservado + '\'' : "") +
                '}';
    }

    // Método equals
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        EspacioIndividual that = (EspacioIndividual) obj;
        return id == that.id &&
               piso == that.piso &&
               numeroAsiento == that.numeroAsiento &&
               (tiempoReservado != null ? tiempoReservado.equals(that.tiempoReservado) : that.tiempoReservado == null);
    }

    // Método hashCode
    @Override
    public int hashCode() {
        int result = Integer.hashCode(id);
        result = 31 * result + Integer.hashCode(piso);
        result = 31 * result + Integer.hashCode(numeroAsiento);
        result = 31 * result + (tiempoReservado != null ? tiempoReservado.hashCode() : 0);
        return result;
    }
}
